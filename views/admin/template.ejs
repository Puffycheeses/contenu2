<!DOCTYPE html>
<html lang="en">
<head>
	
	<% include ../partials/head %>
	
	<meta name="template-id" content="<%- template.id %>">

	<style>
	
		#fields>* {

			margin-bottom: 10px;

		}

		#fields>*>* {

			vertical-align: middle;

		}

		#fields .line {

			display: inline-block;

			border-radius: 100px;

			margin-left: 10px;
			margin-right: 10px;

			opacity: 0.5;

			width: 50px;
			height: 3px;

			background-color: #1B1B1B;

		}

		#fields .delete {

			margin-left: 10px;

		}

		#fields .editor {

			margin-top: 10px;

			transition: 0.2s all;

		}

		/* #templates>*>h3:before {

			content: "";

			opacity: 0;

			transition: 0.2s all;

		}

		#templates>*:hover>h3:before, #templates>.selected>h3:before {

			content: "";

			display: inline-block;
			opacity: 1;
			vertical-align: top;

			margin-right: 10px;

			border-radius: 5px;

			width: 5px;
			height: 30px;

			background-color: #1e00ff;
			
		} */

		#templates>*>h3 {

			border-left: none;

			transition: 0.2s all;

		}

		#templates>*:hover>h3, #templates>.selected>h3 {

			border-left: 5px solid #1B1B1B;
			border-radius: 5px;

			padding-left: 10px;

		}

	</style>

	<script src="https://raw.githack.com/privatesuite/sashimi/master/js/sashimi.js"></script>
	<link rel="stylesheet" href="https://raw.githack.com/privatesuite/sashimi/master/css/editor.css">

</head>
<body>
	
	<div class="app">
		
		<% include ../partials/menu %>
		
		<div class="section main_section">

			<h1>Edit Template "<%- template.name %>"</h1>

			<h2>Fields</h2>

			<button id="new_row">New Row</button>

			<div id="fields">
				
				

			</div>
			
			<button id="save_changes">Save Changes</button> <button id="delete">Delete</button>

		</div>
		
	</div>
	
	<script>

		let templateObject;
		let templateFields;

		function appendNewField (key, value) {

			const field = document.createElement("div");

			const name = document.createElement("input");
			name.type = "text";
			name.classList.add("key");
			name.value = key;

			field.appendChild(name);

			const line = document.createElement("div");
			line.classList.add("line");

			field.appendChild(line);

			const valueEl = document.createElement("textarea");
			valueEl.classList.add("value");
			valueEl.value = value;

			field.appendChild(valueEl);

			const line2 = document.createElement("div");
			line2.classList.add("line");

			field.appendChild(line2);

			const oie = document.createElement("button");
			oie.innerText = "Open in Editor";
			oie.classList.add("open_in_editor");

			field.appendChild(oie);

			const del = document.createElement("button");
			del.innerText = "Delete";
			del.classList.add("delete");

			field.appendChild(del);

			const rand = Math.random().toString(36).replace("0.", "");
			const editor = document.createElement("div");
			editor.id = `ed_${rand}`;
			editor.classList.add("editor");
			editor.style.display = "none";

			field.appendChild(editor);

			document.getElementById("fields").appendChild(field);

			Sashimi.createEditorAt(`#ed_${rand}`);

		}

		(async () => {

			await SashimiReady;

			const templates = await (await fetch("/api/templates")).json();
			
			let template;
			if (document.querySelector("*[name=template-id]").content === "new") template = {fields: {}};
			else template = await (await fetch(`/api/template/${document.querySelector("*[name=template-id]").content}`)).json();
			// const template = document.querySelector("*[name=template-id]").content ? await (await fetch(`/api/template/${document.querySelector("*[name=template-id]").content}`)).json() : undefined;

			for (const fieldName of Object.keys(template.fields)) {
				
				appendNewField(fieldName, template.fields[fieldName]);

			}

			templateObject = template;
			templateFields = template.fields;

			function typeize (value) {

				if (value === "true") return true;
				if (value === "false") return false;
				if (/^[+-]?\d+(\.\d+)?$/.test(value)) return parseFloat(value)
				return value;

			}

			function fieldsToJSON () {

				const o = {};
				[...document.getElementById("fields").children].map(_ => o[_.querySelector(".key").value] = typeize(_.querySelector(".value").value));
				return o;

			}

			document.addEventListener("click", async event => {

				if (!event.target) return;

				if (event.target.id === "new_row") {

					appendNewField("", "");

				} else if (event.target.id === "save_changes") {
					
					notify("Saving changes...");

					const res = await (await fetch(`/api/template/${document.querySelector("*[name=template-id]").content}/edit`, {
						
						method: "POST",

						headers: {

							"Content-Type": "application/json",
							"Authorization": `Bearer ${getCookie("token")}`

						},

						body: JSON.stringify({

							fields: fieldsToJSON()

						})

					})).json();

					if (res.id) document.querySelector("*[name=template-id]").content = res.id;

					notify("Changes saved!");

				} else if (event.target.id === "delete") {

					const res = await (await fetch(`/api/template/${document.querySelector("*[name=template-id]").content}/delete`, {
						
						method: "POST",

						headers: {

							"Authorization": `Bearer ${getCookie("token")}`

						}

					})).json();

					location.href = "<%- baseUrl %>/template";

				} else if (event.target.classList.contains("open_in_editor")) {

					event.target.innerText = "Close Editor";
					event.target.classList.add("close_editor");
					event.target.classList.remove("open_in_editor");

					Sashimi.setHTML(`#${event.target.parentElement.querySelector(".editor").id}`, event.target.parentElement.querySelector(".value").value);
					event.target.parentElement.querySelector(".editor").style.display = "block";

				} else if (event.target.classList.contains("close_editor")) {

					event.target.innerText = "Open in Editor";
					event.target.classList.add("open_in_editor");
					event.target.classList.remove("close_editor");

					event.target.parentElement.querySelector(".editor").style.display = "none";
					event.target.parentElement.querySelector(".value").value = Sashimi.extractHTML(`#${event.target.parentElement.querySelector(".editor").id}`);				

				} else if (event.target.classList.contains("delete")) {

					event.target.parentElement.remove();

				}

			});

		})();

	</script>

</body>
</html>
